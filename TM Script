// ==UserScript==
// @name         Scanner Banner Beta (script storage version)
// @version      1.0
// @description  Creates a banner to store your favorite barcodes
// @author       brausean
// @match        https://*/*
// @match        http://*/*
// @grant        GM_listValues
// @grant        GM_setValue
// @grant        GM_getValue
// @grant        GM_deleteValue
// @grant        GM_addValueChangeListener
// @grant        GM_addStyle
// @require      https://cdn.jsdelivr.net/npm/jsbarcode@3.11.5/dist/JsBarcode.all.min.js
// ==/UserScript==

(function() {
    'use strict';

    var sbStyles = `
    button#bannerButton {
        position: fixed;
        top: 0;
        left: 0;
        z-index: 9999;
    }

    button#clearAll {
        display: none;
        position: fixed;
        top: 0;
        left: 140px;
        z-index: 9999;
    }

    button[id^="delB-"] {
        float: left;
        margin: 2px;
    }

    div#sbContainer {
        display: none;
        position: fixed;
        background-color: rgba(0, 0, 128, 0.5);
        top: 30px;
        left: 0;
        z-index: 9999;
    }

    div#sbContainer input[type="text"] {
        width: 195px;
        margin: 3px;
    }

    label#autoCopyLabel {
        color: white;
        font-family: Verdana;
    `
    GM_addStyle(sbStyles);

    let barcodes = [];
    let bannerState = sessionStorage.getItem("canSeeBanner");


    // Create the button element
    var bannerButton = document.createElement('button');
    bannerButton.innerHTML = 'Scanner Banner';
    bannerButton.setAttribute('id', 'bannerButton');
    //bannerButton.style.position = 'fixed';
    //bannerButton.style.top = '0';
    //bannerButton.style.left = '0';
    //bannerButton.style.zIndex = '9999';
    document.body.appendChild(bannerButton);

     // Create the button element
    var clearAllButton = document.createElement('button');
    clearAllButton.innerHTML = 'Clear All';
    clearAllButton.setAttribute('id', 'clearAll');
    //clearAllButton.style.display = 'none';
    //clearAllButton.style.position = 'fixed';
    //clearAllButton.style.top = '0';
    //clearAllButton.style.left = '140px';
    //clearAllButton.style.zIndex = '9999';
    document.body.appendChild(clearAllButton);

    // Create the dropdown menu
    var dropdown = document.createElement('div');
    //dropdown.style.display = 'none';
    //dropdown.style.position = 'fixed';
    //dropdown.style.backgroundColor = 'rgba(0, 0, 128, 0.5)';
    //dropdown.style.top = '30px';
    //dropdown.style.left = '0';
    //dropdown.style.zIndex = '9999';
    dropdown.setAttribute('id', "sbContainer");
    //dropdown.classList.add("container");
    dropdown.insertAdjacentHTML("afterbegin", '<input type="text" id="newBarcode" placeholder="Type barcode. Press Enter." style="width: 195px; margin: 3px"><br><label id="autoCopyLabel"><input type="checkbox" id="autoCopy"> Auto Copy</label>');
    document.body.appendChild(dropdown);

    //check for duplicates and prevent them

    //let barNodes = document.getElementsByClassName('my-element') || ;
    //future code going here


    //create barcode with delete button. saves to local storage
    function addBarcode(text) {
        dropdown.insertAdjacentHTML("beforeend", `
        <div id="barBox-${text}" class="my-element" style='margin: 3px'>
         <svg id="${text}" class="barcode-svg" jsbarcode-value="${text}" jsbarcode-margin="6" jsbarcode-height="25px" jsbarcode-width="1"></svg>
         <button id="delB-${text}">Delete</button>
        </div>`);
        JsBarcode(".barcode-svg").init();
        var deleteButton = document.getElementById(`delB-${text}`);
        deleteButton.addEventListener('click', function() {
            removeBarcode("barBox-" + text);
            let barDex = barcodes.indexOf(text);
            if (barDex !== -1) {
                barcodes.splice(barDex, 1);
                GM_setValue("savedArray", barcodes);
                console.log('Deleted from script storage.');
            }
        });
        //creates a blur listener on click
        var blurMe = document.getElementById(text);
        blurMe.addEventListener('click', function() {
            blurMe.style.filter = (blurMe.style.filter !== 'blur(5px)') ? 'blur(5px)' : 'none'
        });
        //adds barcodes text to the barcodes array
        barcodes.push(`${text}`);
        GM_setValue("savedArray", barcodes);
        console.log(barcodes + ' saved to script storage. Saved Barcodes: ' + GM_listValues());
        // Add a listener for changes to the "savedTab" key
        var listenerId = GM_addValueChangeListener("savedArray", function(key, oldValue, newValue, remote) {
        // Print a message to the console when the value of the "savedTab" key changes
        console.log("The value of the '" + key + "' key has changed from '" + oldValue + "' to '" + newValue + "'");
        });
        listenerId;
    };

    // Load saved barcodes
    var savedBarcodes = GM_getValue("savedArray", null);
    if (savedBarcodes!== null && savedBarcodes !== "") {
        savedBarcodes.forEach(function(barcode) {
            addBarcode(barcode);
            console.log('Loaded ' + barcode);
        });
    }

    console.log('Number of Elements: ' + dropdown.childElementCount);

    function saveInput () {
        var userInput = document.getElementById("newBarcode").value;
        return userInput;
    };

    //Remove barcode when delete button is clicked
    function removeBarcode(barcodeId) {
    var barcode = document.getElementById(barcodeId);
    barcode.parentNode.removeChild(barcode);
    };

    //remembers if the banner is open or closed on page reload
    dropdown.style.display = (bannerState === "block") ? "block" : "none";
    clearAllButton.style.display = (bannerState === "block") ? "block" : "none";

    // Show/Hide the banner on button click
    bannerButton.addEventListener('click', function() {
        if (dropdown.style.display === 'none') {
            dropdown.style.display = 'block';
            clearAllButton.style.display = 'block';
            bannerState = 'block';
            sessionStorage.setItem("canSeeBanner", bannerState);
            console.log(bannerState);
        } else {
            dropdown.style.display = 'none';
            clearAllButton.style.display = 'none';
            bannerState = 'none';
            sessionStorage.setItem("canSeeBanner", bannerState);
            console.log(bannerState);
        }
    });

    //clear locally saved barcodes
    clearAllButton.addEventListener('click', function() {
        //reset array to empty
        barcodes = [];
        console.log(barcodes);
        //remove local storage keys and their values
        GM_deleteValue("savedArray");
        console.log('Deleting all barcodes...');
        // Select all barcodes in the banner
        var barBoxes = document.querySelectorAll('[id*="barBox-"]');
        // remove barcodes from banner
        barBoxes.forEach(function(box) {
            removeBarcode(box.getAttribute("id"));
            console.log('Barcodes Removed');
        });
    });

    //generates barcode upon enter keypress and resets input field
    var listenForEnter = document.getElementById("newBarcode");
    listenForEnter.addEventListener('keydown', function(event) {
    if (event.key === 'Enter' && newBarcode.value !== "") {
      // do something when enter key is pressed
      addBarcode(saveInput());
      //clear input box
      listenForEnter.value="";
    }
    });

    //save autoCopy preference
    var autoCopyState = document.getElementById('autoCopy');

    //create barcode when user selects text on the screen.
    document.addEventListener('mouseup', function(event) {
        if (autoCopyState.checked) {
            let userSelectedText = window.getSelection().toString();
            //copy text to clipboard automatically
            navigator.clipboard.writeText(userSelectedText);
            //deselect users selection to prevent addition event triggers
            window.getSelection().removeAllRanges();
            //checks to make sure user text is valid input
            (userSelectedText) ? addBarcode(userSelectedText) : console.log("Not able to barcode");
        } else {console.log("Auto Copy not enabled")};
    });

})();
