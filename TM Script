// ==UserScript==
// @name         Scanner Banner
// @version      1.5
// @description  Creates a banner to store your favorite barcodes. Ctrl + Shift shows/hides the banner
// @author       brausean
// @match        https://*/*
// @match        http://*/*
// @grant        GM_listValues
// @grant        GM_setValue
// @grant        GM_getValue
// @grant        GM_deleteValue
// @grant        GM_addValueChangeListener
// @grant        GM_addStyle
// @noframes
// @require      https://cdn.jsdelivr.net/npm/jsbarcode@3.11.5/dist/JsBarcode.all.min.js
// ==/UserScript==

(function() {
    'use strict';

    var sbStyles = `

    button#bannerButton {
        display: none;
    }

    button#clearAll {
        background-color: #30363d;
        color: white;
        border-radius: 5px;
        width: 25%;
        margin: 2px;
        z-index: 9999;
    }

    i[id^="delB-"] {
        position: relative;
        left: 13px;
        bottom: 8px;
        color: #30363d;
        height: 16px;
        padding: 1px;
        text-align: center;
        line-height: 10px;
        z-index: 9999;

    }

    i[id^="delB-"]:hover {
        color: red;
    }

    #sbContainer .my-element {
        margin-bottom: 20px;
        text-align: center;
    }

    #sbContainer .my-element {
        margin-bottom: 20px;
        text-align: center;
    }
    #sbContainer .barcodeLabel {
        color: white;
        font-size: 20px;
        margin: 0px;
    }

    .barcode-svg {
        position: relative;
        right: 10px;
        border-radius: 5px;
    }

    #sbContainer {
        overflow: auto;
        height: 100vh;
        display: block;
        position: fixed;
        border-radius: 10px;
        padding: 2px;
        background-color: rgba(48, 54, 61, .7);
        top: 0px;
        left: 0;
        z-index: 9997;
    }

    #sbContainer input[type="text"] {
        background-color: #30363d;
        color: white;
        width: 180px;
        border-radius: 5px;
        text-align: center;
        margin: 2px;
    }

    #autoCopyLabel {
        color: white;
        font-family: Verdana;
        font-size: 12px;
        font-weight: bold;
    }

    #keycodeContainer {
        display: grid;
        grid-template-columns: repeat(4, 1fr);
        grid-gap: 5px;
        position: fixed;
        border-radius: 10px;
        bottom: 0;
        width: 100%;
        height: 60px;
        z-index: 9998;
        background-color: rgba(48, 54, 61, .7);
    }
    .kclabels {
        color: white;
        font-family: Verdana;
        font-size: 12px;

    }
    #sbLogo  {
        position: relative;
        top: 5px;
        left: 20px;

    }

    `
    GM_addStyle(sbStyles);
    GM_addStyle(`@import url('https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css');`);


    const keys = GM_listValues();
///*
    //log keys:values for debugging
    function letsTest() {
    keys.forEach((key) => {
      const value = GM_getValue(key);
      console.log(`Key: ${key}, Value: ${value}`);
    });}
//*/
    let barcodes = [];
    let bannerState = GM_getValue('canSeeBanner', 'block');
    let keycodesVisible = GM_getValue('canSeeKeycodes', 'grid');
    let blurState = [];
    let autoCopyState = GM_getValue('autoCopyState');
    let altNames = GM_getValue('nameChanges', {});
    let userSavedBarcodes = GM_getValue('userSB', {});




    // Create the button element
    var bannerButton = document.createElement('button');
    bannerButton.setAttribute('id', 'bannerButton');
    document.body.appendChild(bannerButton);

    document.addEventListener('keydown', function(event) {
      // Check if the key combination is Ctrl+Shift
      if (event.ctrlKey && event.keyCode === 16) {
        event.preventDefault();
          bannerButton.click();
      }

    });
    // Create keycode banner for keyboard key shortcuts
    var keycodes = document.createElement('div');
    keycodes.setAttribute('id', "keycodeContainer");
    keycodes.setAttribute('style', 'display: none; height: 70px;');
    keycodes.insertAdjacentHTML("afterbegin", `
                                <div id='loadSave'>
                                <button id='loadUSaved'>Load</button>
                                <select id="saveDropdown">
                                  <option value="slot1">Slot 1</option>
                                  <option value="slot2">Slot 2</option>
                                  <option value="slot3">Slot 3</option>
                                </select><br>
                                <button id='saveUCodes'>Save</button>
                                <h3 id='sbLogo'>ScannerBanner v1.5</h3>
                                ??
                                </div>
                                <label class= "kclabels">
                                Refresh<br>
                                <img src="https://i.postimg.cc/wMz3NLfG/Refresh.jpg" width="50">
                                </label>
                                <label class= "kclabels">
                                Tab<br>
                                <img src="https://i.postimg.cc/nV1h5swn/Tab.jpg" width="50">
                                </label>
                                <label class= "kclabels">
                                Enter<br>
                                <img src="https://i.postimg.cc/50TSW7tF/Enter.jpg" width="50">
                                </label>
                                `);
    document.body.appendChild(keycodes);
    const loadbutton = document.getElementById('loadUSaved');
    const saveButton = document.getElementById('saveUCodes');
    const saveDropdown = document.getElementById('saveDropdown');
    let selectedSlot = saveDropdown.value;
    loadbutton.addEventListener('click', function() {
        userSavedBarcodes = GM_getValue('userSB');
        selectedSlot = saveDropdown.value;
        
        loadBarcodeSet(userSavedBarcodes[selectedSlot])
        // this or the function are/is going to need adjustment to deal with the param being an object now
        //loadBarcodeSet(userSavedBarcodes);
    });
    saveButton.addEventListener('click', function() {
        selectedSlot = saveDropdown.value;
        console.log(selectedSlot);
        userSavedBarcodes[selectedSlot] = barcodes;
        GM_setValue('userSB', userSavedBarcodes);
        console.log(userSavedBarcodes);
    })

    // Create the dropdown menu
    var dropdown = document.createElement('div');
    dropdown.setAttribute('id', "sbContainer");
    dropdown.insertAdjacentHTML("afterbegin", `
                                <input type="text"
                                       id="newBarcode"
                                       maxlength="30"
                                       placeholder="Type barcode. Press Enter.">
                                <br>
                                <label id="autoCopyLabel">
                                <input type="checkbox"
                                       id="autoCopy">
                                       Auto Copy
                                </label>
                                <button id='clearAll'>Clear</button>`);
    document.body.appendChild(dropdown);



    // Grab the clear all button element
    var clearAllButton = document.getElementById('clearAll');

    // target checkbox and set current state
    var autoCopyCB = document.getElementById('autoCopy');
    autoCopyCB.checked = autoCopyState;

    // Function to handle updating autoCopyState
    function updateAutoCopyState() {
        autoCopyState = autoCopyCB.checked;
        GM_setValue('autoCopyState', autoCopyState);
        GM_setValue('canSeeBanner', bannerState);
        GM_setValue('canSeeKeycodes', keycodesVisible)}
        // Event listener for the checkbox change event
        autoCopyCB.addEventListener('change', function() {
        updateAutoCopyState();
    });

    function blurIt(blarray) {
        blarray.forEach(function(bl) {
            if (barcodes.indexOf(bl) !== -1) {
                let blurItAgain = document.getElementById(`${bl}`);
                blurItAgain.style.filter = 'blur(5px)';
            }
        })
    }

    function tempClear() {
        barcodes = [];
        GM_deleteValue("savedArray");
        let grabAllCodes = document.querySelectorAll('[id*="barBox-"]');
        grabAllCodes.forEach(function(code) {
            removeBarcode(code.getAttribute("id"));
        });
    }

    //create barcode with delete button. saves to local storage
    function addBarcode(text) {
        let dupeTest = barcodes.indexOf(text)
        if (dupeTest === -1) {
            dropdown.insertAdjacentHTML("beforeend", `
        <div id="barBox-${text}"class="my-element">
             <p class="barcodeLabel" id="bl-${text}" hint="${text}">${text}</p>
             <i class="fas fa-trash-alt" id="delB-${text}"></i>
             <svg id="${text}"
              class="barcode-svg"
              jsbarcode-format="CODE128"
              jsbarcode-value="${text}"
              jsbarcode-displayvalue="false"
              jsbarcode-linecolor="#30363d"
              jsbarcode-margin="3"
              jsbarcode-marginleft="24"
              jsbarcode-textmargin="0"
              jsbarcode-height="20px"
              jsbarcode-width="1"></svg>
        </div>`);
        JsBarcode(".barcode-svg").init();
        blurIt(blurState);

        var deleteButton = document.getElementById(`delB-${text}`);
        deleteButton.addEventListener('click', function() {
            delete altNames[`bl-${text}`];
            if (blurMe.style.filter === 'blur(5px)') { updateBlur() };
            removeBarcode("barBox-" + text);
            let barDex = barcodes.indexOf(text);
            if (barDex !== -1) {
                barcodes.splice(barDex, 1);
                GM_setValue("savedArray", barcodes);
            }
        });

        let nameChange = (old) => {
            try {
                let newName = prompt("New Name: (30 character max)",`${text}`).trim();
                newName = (newName === null || newName === '') ? old.innerText : newName;
                //console.log('before: ', newName);
                if (newName.length > 30) {newName = newName.substring(0, 30)}
                //console.log('after: ', newName);
                if (newName !== old.innerText) {
                    altNames[old.id] = newName;
                    GM_setValue('nameChanges', altNames);
                    old.innerText = newName;
                }
            } catch (error) {
                console.log(error);
              }

        };
        document.getElementById(`bl-${text}`).addEventListener('click', function() {
            nameChange(this);
        });

        var blurMe = document.getElementById(text);
        function updateBlur() {
            blurMe.style.filter = (blurMe.style.filter !== 'blur(5px)') ? 'blur(5px)' : 'none'
            if (blurMe.style.filter === 'blur(5px)') {
                blurState.push(text); // adding item to array for saving to script storage
                GM_setValue('bluredCodes', blurState); //save array to storage
            }
            else {
                var index = blurState.indexOf(text);
                if (index !== -1) {
                    blurState.splice(index, 1);
                    GM_setValue('bluredCodes', blurState);
                }
            }};

        //creates a blur listener on click
        blurMe.addEventListener('click', function() {
            updateBlur();
        });

        //adds barcodes text to the barcodes array
        barcodes.push(`${text}`);
        GM_setValue("savedArray", barcodes);
        }
    };

    function loadBarcodes() {
        // Load saved barcodes
        var savedBarcodes = GM_getValue("savedArray", null);
        var secretSaved = savedBarcodes;
        let savedBlurs = GM_getValue('bluredCodes', []);
        blurState = savedBlurs;
        tempClear();
        if (secretSaved!== null && secretSaved !== "") {
            secretSaved.forEach(function(barcode) {
                addBarcode(barcode);
            });
            secretSaved.forEach(function(barcode) {
                if (savedBlurs.indexOf(barcode) !== -1) {
                    let blurItAgain = document.getElementById(`${barcode}`);
                    blurItAgain.style.filter = 'blur(5px)';
                };
            })
        }
        secretSaved = [];
        renameBarcodes(barcodes);
    };
    loadBarcodes();

    function renameBarcodes(anArray) {
        anArray.forEach((bc) => {
            if(altNames){
                if (`bl-${bc}` in altNames) {
                    let bLabel = document.getElementById(`bl-${bc}`)
                    let altName = altNames[`bl-${bc}`];
                    bLabel.innerText = altName;
                }
            };
        });
    };
    function loadBarcodeSet(a) {
        console.log(barcodes);
        if (barcodes.length > 0) {
            tempClear();
        } else console.log('Empty');
        a.forEach(function(b){
            addBarcode(b);
        });
    }
    function handleTabChange(event) {
      if (event.type === 'blur') {
        // Tab is inactive
        GM_setValue('nameChanges', altNames);
        updateAutoCopyState();

        } else if (event.type === 'focus') {
            // Tab is active
            altNames = GM_getValue('nameChanges')|| {};
            loadBarcodes();
            autoCopyState = GM_getValue('autoCopyState');
            autoCopyCB.checked = autoCopyState;
            bannerState = GM_getValue('canSeeBanner');
            dropdown.style.display = bannerState;
            keycodesVisible = GM_getValue('canSeeKeycodes');
            keycodes.style.display = keycodesVisible
            }
    }

        // Attach the event listeners to the window object
    window.addEventListener('blur', handleTabChange);
    window.addEventListener('focus', handleTabChange);

    function saveInput () {
        var userInput = document.getElementById("newBarcode").value;
        return userInput;
    };

    //Remove barcode when delete button is clicked
    function removeBarcode(barcodeId) {
    var barcode = document.getElementById(barcodeId);
    barcode.parentNode.removeChild(barcode);
    };

    //remembers if the banner is open or closed on page reload
    dropdown.style.display = (bannerState === "block") ? "block" : "none";
    keycodes.style.display = (keycodesVisible === "grid") ? "grid" : "none";

    // Show/Hide the banner on button click
    bannerButton.addEventListener('click', function() {
        if (dropdown.style.display === 'none') {
            dropdown.style.display = 'block';
            keycodes.style.display = 'grid';
            bannerState = 'block';
            keycodesVisible = 'grid';
            GM_setValue("canSeeBanner", bannerState);
            GM_setValue("canSeeKeycodes", keycodesVisible);
        } else {
            dropdown.style.display = 'none';
            keycodes.style.display = 'none';
            bannerState = 'none';
            GM_setValue("canSeeBanner", bannerState);
            keycodesVisible = 'none';
            GM_setValue("canSeeKeycodes", keycodesVisible);
        }
    });

    //clear locally saved barcodes
    clearAllButton.addEventListener('click', function() {
        let conDelete = confirm('Delete all barcodes?');
        if (conDelete) {
        //reset array to empty
            barcodes = [];
            blurState = [];
            altNames = {};
        //remove all local storage keys and their values
            ///*
            GM_listValues().forEach(function(key) {
                GM_deleteValue(key);
            })
            //*/
            //remove all storage but saved barcodes object
            GM_deleteValue('canSeeBanner');
            GM_deleteValue('canSeeKeycodes');
            GM_deleteValue('nameChanges');
            GM_deleteValue('autoCopyState');
            GM_deleteValue('savedArray');
            GM_deleteValue('bluredCodes');
            letsTest();
        // Select all barcodes in the banner
            var barBoxes = document.querySelectorAll('[id*="barBox-"]');
        // remove barcodes from banner
            barBoxes.forEach(function(box) {
                removeBarcode(box.getAttribute("id"));
            });
        } else console.log('User cancelled action');
    });

    //generates barcode upon enter keypress and resets input field
    var listenForEnter = document.getElementById("newBarcode");
    listenForEnter.addEventListener('keydown', function(event) {
    if (event.key === 'Enter' && this.value !== "") {
      // do something when enter key is pressed
      addBarcode(saveInput());
      //clear input box
      this.value="";
    }
    });

    //create barcode when user selects text on the screen.
    document.addEventListener('mouseup', function(event) {
        let userSelectedText = window.getSelection().toString();
        if (autoCopyCB.checked) {
            //deselect users selection to prevent addition event triggers
            window.getSelection().removeAllRanges();
            if (userSelectedText) { addBarcode(userSelectedText) };
        };
       //Place ^^^ ternary here for always autoCopy function if auuto copy user choice is ever removed.
    });
    //confirm data keys being saved for each site visited
   // console.log('Keys Saved to script storage: ' + GM_listValues());

    // Get all elements with the class 'barcode-svg'
    let barcodeElements = document.getElementsByClassName('barcode-svg');
     // Create a click listener for each barcode element
    Array.from(barcodeElements).forEach(element => {
       element.addEventListener('click', handleClick);
    });
     // Click event handler
        function handleClick(event) {
            GM_setValue('bluredCodes', blurState);
    }
})();
