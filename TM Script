// ==UserScript==
// @name         Scanner Banner Beta (script storage version)
// @version      1.0
// @description  Creates a banner to store your favorite barcodes
// @author       brausean
// @match        https://*/*
// @match        http://*/*
// @grant        GM_listValues
// @grant        GM_setValue
// @grant        GM_getValue
// @grant        GM_deleteValue
// @grant        GM_addValueChangeListener
// @grant        GM_addStyle
// @require      https://cdn.jsdelivr.net/npm/jsbarcode@3.11.5/dist/JsBarcode.all.min.js
// ==/UserScript==

(function() {
    'use strict';

    var sbStyles = `
    button#bannerButton {
        background-color: #30363d;
        color: white;
        position: fixed;
        top: 0;
        left: 0;
        z-index: 9999;
    }

    button#clearAll {
        background-color: #30363d;
        color: white;
        display: none;
        position: fixed;
        top: 0;
        left: 140px;
        z-index: 9999;
    }

    button[id^="delB-"] {
        background-color: #30363d;
        color: white;
        float: left;
        margin: 2px;
    }

    div#sbContainer {
        overflow: auto;
        height: 100vh;
        display: none;
        position: fixed;
        background-color: rgba(48, 54, 61, .7);
        top: 30px;
        left: 0;
        z-index: 9999;
    }

    #sbContainer input[type="text"] {
        background-color: #30363d;
        color: white;
        width: 200px;
    }

    #autoCopyLabel {
        color: white;
        font-family: Verdana;
        font-size: 12px;
        font-weight: bold;
    }

    input[type="checkbox"] {
      appearance: none;
      -webkit-appearance: none;
      -moz-appearance: none;
    }

    input[type="checkbox"]:before {
      content: "OFF";
      text-align: center;
      display: inline-block;
      width: 30px;
      height: 18px;
      line-height: 18px;
      border: 1px solid #ccc;
      background-color: #30363d;
      margin: 3px;
    }

    input[type="checkbox"]:checked:before {
      background-color: #808080;
      color: black;
      content: "ON";
}

    `
    GM_addStyle(sbStyles);


    let barcodes = [];
    let bannerState = GM_getValue('canSeeBanner');
    let blurState = [];
    let autoCopyState = GM_getValue('autoCopyState');
    console.log(autoCopyState);

    // Create the button element
    var bannerButton = document.createElement('button');
    bannerButton.innerHTML = 'Scanner Banner';
    bannerButton.setAttribute('id', 'bannerButton');
    document.body.appendChild(bannerButton);

     // Create the button element
    var clearAllButton = document.createElement('button');
    clearAllButton.innerHTML = 'Clear All';
    clearAllButton.setAttribute('id', 'clearAll');
    document.body.appendChild(clearAllButton);

    // Create the dropdown menu
    var dropdown = document.createElement('div');
    dropdown.setAttribute('id', "sbContainer");
    dropdown.insertAdjacentHTML("afterbegin", `
                                <input type="text"
                                       id="newBarcode"
                                       placeholder="Type barcode. Press Enter."
                                       style="width: 195px; margin: 3px">
                                <br>
                                <label id="autoCopyLabel">
                                <input type="checkbox"
                                       id="autoCopy">
                                       Auto Copy
                                </label>
                                `);
    document.body.appendChild(dropdown);
    var autoCopyCB = document.getElementById('autoCopy');
    //autoCopyCB.checked = autoCopyState;

    // Function to handle updating autoCopyState
    function updateAutoCopyState() {
    autoCopyState = autoCopyCB.checked;
    GM_setValue('autoCopyState', autoCopyState);
        GM_setValue('canSeeBanner', bannerState);
    }

    // Event listener for the checkbox change event
    autoCopyCB.addEventListener('change', function() {
    updateAutoCopyState();
    });

    // Event listeners for the window focus and blur events
    window.addEventListener('focus', function() {
    autoCopyState = GM_getValue('autoCopyState');
    autoCopyCB.checked = autoCopyState;
        bannerState = GM_getValue('canSeeBanner');
        dropdown.style.display = bannerState;
        clearAllButton.style.display = bannerState
    });

    window.addEventListener('blur', function() {
    updateAutoCopyState();
    });

    function blurIt(blarray) {
        blarray.forEach(function(bl) {
            if (barcodes.indexOf(bl) !== -1) {
                let blurItAgain = document.getElementById(`${bl}`);
                //console.log(blurItAgain);
                blurItAgain.style.filter = 'blur(5px)';
                //console.log('blurred code');

        }})
    }

    function tempClear() {
        barcodes = [];
        GM_deleteValue("savedArray");
        let grabAllCodes = document.querySelectorAll('[id*="barBox-"]');
        grabAllCodes.forEach(function(code) {
            removeBarcode(code.getAttribute("id"));
            console.log('Barcode Temp removed');
        });
    }

    //create barcode with delete button. saves to local storage
    function addBarcode(text) {
        let dupeTest = barcodes.indexOf(text)
        if (dupeTest === -1) {
            dropdown.insertAdjacentHTML("beforeend", `
        <div id="barBox-${text}"
             class="my-element"
             style='margin: 3px'>
         <svg id="${text}"
              class="barcode-svg"
              jsbarcode-value="${text}"
              jsbarcode-margin="6"
              jsbarcode-height="25px"
              jsbarcode-width="1"></svg>
         <button id="delB-${text}">Delete</button>
        </div>`);
        //blur it function here
        JsBarcode(".barcode-svg").init();
        blurIt(blurState);
      //  console.log(blurState);
        var deleteButton = document.getElementById(`delB-${text}`);
        deleteButton.addEventListener('click', function() {
            removeBarcode("barBox-" + text);
            let barDex = barcodes.indexOf(text);
            if (barDex !== -1) {
                barcodes.splice(barDex, 1);
                GM_setValue("savedArray", barcodes);
                console.log(barcodes);
                //console.log('Deleted from script storage.');
            }
        });
        //creates a blur listener on click
        var blurMe = document.getElementById(text);
        blurMe.addEventListener('click', function() {
            blurMe.style.filter = (blurMe.style.filter !== 'blur(5px)') ? 'blur(5px)' : 'none'
            if (blurMe.style.filter === 'blur(5px)') {
                blurState.push(text); // adding item to array for saving to script storage
                GM_setValue('bluredCodes', blurState); //save array to storage
                //console.log('blurState array:');
                //console.log(blurState);
                //console.log('saved: ' + blurMe.style.filter);
            }
            else {
                var index = blurState.indexOf(text);
                if (index !== -1) {
                    blurState.splice(index, 1);
                    GM_setValue('bluredCodes', blurState);
                    //console.log(`removed ${text} from blurState`);
                    //console.log('blurState:');
                    //console.log(blurState);
                }
            }
        });

        //adds barcodes text to the barcodes array
        barcodes.push(`${text}`);
        GM_setValue("savedArray", barcodes);
        } else {console.log('Barcode Already Exists')};
    };

    function loadBarcodes() {
        autoCopyCB.checked = autoCopyState;
        console.log('loadBarcodes() running');
    // Load saved barcodes
    var savedBarcodes = GM_getValue("savedArray", null);
    var secretSaved = savedBarcodes;
    let savedBlurs = GM_getValue('bluredCodes', []);
    blurState = savedBlurs;
        tempClear();
        console.log(blurState)
  //  console.log('savedBlurs:');
  //  console.log(savedBlurs);
  //  console.log('blurState:');
  //  console.log(blurState);
    if (secretSaved!== null && secretSaved !== "") {
        secretSaved.forEach(function(barcode) {
            addBarcode(barcode);
        });
        secretSaved.forEach(function(barcode) {
            if (savedBlurs.indexOf(barcode) !== -1) {
                let blurItAgain = document.getElementById(`${barcode}`);
                //console.log(blurItAgain);
                blurItAgain.style.filter = 'blur(5px)';
                //console.log('blurred code');
            };
        })
    }
    };
    loadBarcodes();

    // console.log('Number of Elements: ' + dropdown.childElementCount);
    function handleTabChange(event) {
      if (event.type === 'blur') {
        // Tab is inactive
        console.log('Tab is inactive');
        loadBarcodes();

        } else if (event.type === 'focus') {
            // Tab is active
            console.log('Tab is active');
            loadBarcodes();
            }
    }

        // Attach the event listeners to the window object
    window.addEventListener('blur', handleTabChange);
    window.addEventListener('focus', handleTabChange);

    function saveInput () {
        var userInput = document.getElementById("newBarcode").value;
        return userInput;
    };

    //Remove barcode when delete button is clicked
    function removeBarcode(barcodeId) {
    var barcode = document.getElementById(barcodeId);
    barcode.parentNode.removeChild(barcode);
    };

    //remembers if the banner is open or closed on page reload
    dropdown.style.display = (bannerState === "block") ? "block" : "none";
    clearAllButton.style.display = (bannerState === "block") ? "block" : "none";

    // Show/Hide the banner on button click
    bannerButton.addEventListener('click', function() {
        if (dropdown.style.display === 'none') {
            dropdown.style.display = 'block';
            clearAllButton.style.display = 'block';
            bannerState = 'block';
            GM_setValue("canSeeBanner", bannerState);
            console.log(bannerState);
        } else {
            dropdown.style.display = 'none';
            clearAllButton.style.display = 'none';
            bannerState = 'none';
            GM_setValue("canSeeBanner", bannerState);
            console.log(bannerState);
        }
    });

    //clear locally saved barcodes
    clearAllButton.addEventListener('click', function() {
        //reset array to empty
        barcodes = [];
        console.log(barcodes);
        //GM_deleteValue("savedArray");
        //remove local storage keys and their values
        GM_listValues().forEach(function(key) {
            GM_deleteValue(key);
        })
        console.log('Deleting barcodes...');
        // Select all barcodes in the banner
        var barBoxes = document.querySelectorAll('[id*="barBox-"]');
        // remove barcodes from banner
        barBoxes.forEach(function(box) {
            removeBarcode(box.getAttribute("id"));
            console.log('Barcodes Removed');
        });
    });

    //generates barcode upon enter keypress and resets input field
    var listenForEnter = document.getElementById("newBarcode");
    listenForEnter.addEventListener('keydown', function(event) {
    if (event.key === 'Enter' && newBarcode.value !== "") {
      // do something when enter key is pressed
      addBarcode(saveInput());
      //clear input box
      listenForEnter.value="";
    }
    });

    //create barcode when user selects text on the screen.
    document.addEventListener('mouseup', function(event) {
        let userSelectedText = window.getSelection().toString();
        if (autoCopyCB.checked) {
            //deselect users selection to prevent addition event triggers
            window.getSelection().removeAllRanges();
            (userSelectedText) ? addBarcode(userSelectedText) : console.log("Nothing to barcode")
        };
       //Place ^^^ ternary here for always autoCopy function if auuto copy user choice is ever removed.
    });
    //confirm data keys being saved for each site visited
    console.log('Keys Saved to script storage: ' + GM_listValues());

    // Get all elements with the class 'barcode-svg'
    let barcodeElements = document.getElementsByClassName('barcode-svg');
     // Create a click listener for each barcode element
    Array.from(barcodeElements).forEach(element => {
       element.addEventListener('click', handleClick);
    });
     // Click event handler
        function handleClick(event) {
            GM_setValue('bluredCodes', blurState);
            console.log('Barcode element clicked:', event.target);
            console.log('blurState');
            console.log(blurState);
    }
})();
